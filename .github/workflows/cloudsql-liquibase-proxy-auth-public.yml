name: Liquibase to CloudSQL PostgreSQL with Script rollback

on:
  workflow_dispatch:
  push:
    paths:
      - 'db/changesets/datastore/cloudsql/**'
      - '.github/workflows/cloudsql-liquibase.yml'

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      PROJECT_ID: autodeploydb
      CLOUDSQL_INSTANCE: us-central1:poc-dbtools
      CLOUDSQL_DATABASE: poc_liquibase
      CLOUDSQL_USER: ${{ secrets.CLOUDSQL_DEPLOY_USER }}
      CLOUDSQL_PASSWORD: ${{ secrets.CLOUDSQL_DEPLOY_PASSWORD }}
      GCP_SA_KEY: ${{ secrets.CLOUDSQL_SA_KEY }}
      # For private IP instances, set to 'true'
      USE_PRIVATE_IP: 'true'
      DRY_RUN_ENABLED: 'true'
      LB_TAG: run-${{ github.run_id }}-${{ github.run_attempt }}
      LB_DRIVER: org.postgresql.Driver
      LB_CHANGELOG: db/changelog.xml
      LB_PROPERTIES: db/config/liquibase.properties
      LB_LOG_LEVEL: info    
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate to GCP (SA JSON)
        uses: google-github-actions/auth@v2
        with:
          # Your SA JSON key in GitHub Secrets
          credentials_json: ${{ secrets.CLOUDSQL_SA_KEY }}

      - name: Configure gcloud project
        run: gcloud config set project "${PROJECT_ID}"

      # --- Start Cloud SQL Auth Proxy (PUBLIC IP path) ---
      - name: Start Cloud SQL Auth Proxy v2
        env:
          INSTANCE_CONN_NAME: ${{ env.PROJECT_ID }}:${{ env.CLOUDSQL_INSTANCE }}
        run: |
          set -euo pipefail
          curl -sSL -o cloud-sql-proxy \
            https://storage.googleapis.com/cloud-sql-connectors/cloud-sql-proxy/v2.11.3/cloud-sql-proxy.linux.amd64
          chmod +x cloud-sql-proxy
          # Use the credentials file that auth@v2 wrote for us
          # $GOOGLE_GHA_CREDS_PATH is set by the auth action
          ./cloud-sql-proxy "$INSTANCE_CONN_NAME" \
            --port 5432 \
            --credentials-file="$GOOGLE_GHA_CREDS_PATH" \
            --quiet > proxy.log 2>&1 &
          # Wait until the proxy is listening
          timeout 30 bash -c 'until nc -z 127.0.0.1 5432; do sleep 1; done'
          echo "Proxy is listening on 127.0.0.1:5432"

      # Optional: quick DB connectivity smoke-test (PostgreSQL)
      - name: Install psql client and verify connection
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          PGPASSWORD="${CLOUDSQL_PASSWORD}" psql \
            "host=127.0.0.1 port=5432 dbname=${CLOUDSQL_DATABASE} user=${CLOUDSQL_USER} sslmode=disable" \
            -c "SELECT current_database() as db, current_user as user, version() as version;"

      # Export JDBC URL for Liquibase (localhost via proxy)
      - name: Build Liquibase JDBC URL (localhost)
        run: |
          echo "LB_URL=jdbc:postgresql://127.0.0.1:5432/${CLOUDSQL_DATABASE}" >> "$GITHUB_ENV"
          echo "LB_DRIVER=org.postgresql.Driver" >> "$GITHUB_ENV"

      # Example Liquibase dry-run (uses your env + LB_URL)
      # Replace with your actual Liquibase invocation if different.
      - name: Liquibase updateSQL (dry run)
        if: env.DRY_RUN_ENABLED == 'true'
        run: |
          liquibase \
            --driver="${LB_DRIVER}" \
            --url="${LB_URL}" \
            --username="${CLOUDSQL_USER}" \
            --password="${CLOUDSQL_PASSWORD}" \
            --changeLogFile="db/changelog.xml" \
            --log-level=info \
            updateSQL

      - name: Liquibase update (real)
        if: env.DRY_RUN_ENABLED != 'true'
        run: |
          liquibase \
            --driver="${LB_DRIVER}" \
            --url="${LB_URL}" \
            --username="${CLOUDSQL_USER}" \
            --password="${CLOUDSQL_PASSWORD}" \
            --changeLogFile="db/changelog.xml" \
            --log-level=info \
            update
